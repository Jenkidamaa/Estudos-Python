{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Exercicios.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMFImu8i9cu/ep2wyaOoTna",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jenkidamaa/Estudos-Python/blob/main/Exercicios.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 059: \n",
        "#Crie um programa que leia dois valores e mostre um menu na tela:\n",
        "#[ 1 ] somar\n",
        "#[ 2 ] multiplicar\n",
        "#[ 3 ] maior\n",
        "#[ 4 ] novos números\n",
        "#[ 5 ] sair do programa\n",
        "#Seu programa deverá realizar a operação solicitada em cada caso.\n",
        "n1 = float(input(\"n1 \"))\n",
        "n2 = float(input(\"n2 \"))\n",
        "bol = True\n",
        "e = int(input(\"Escolha uma das operações \\n[ 1 ] somar \\n[ 2 ] multiplicar \\n[ 3 ] maior \\n[ 4 ] novos números \\n[ 5 ] sair do programa \"))\n",
        "while bol == True:\n",
        "  if e == 1:\n",
        "    print(\"Soma\", n1+n2)\n",
        "  elif e==2:\n",
        "    print(\"n1 * n2\", n1*n2)\n",
        "\n",
        "  elif e==3:\n",
        "    if n1>n2:\n",
        "      print(\"maior \", n1)\n",
        "    elif n1 == n2:\n",
        "      print(\"São iguais.\")\n",
        "    else:\n",
        "      print(\"maior \", n2)\n",
        "  elif e==4:\n",
        "    n1 = float(input(\"n1 \"))\n",
        "    n2 = float(input(\"n2 \"))\n",
        "  else:\n",
        "    break"
      ],
      "metadata": {
        "id": "gMVIrGyq1WsE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 060: Faça um programa que leia um número qualquer e mostre o seu\n",
        "#fatorial. Ex: 5! = 5 x 4 x 3 x 2 x 1 = 120\n",
        "def fat(n):\n",
        "  if n == 0:\n",
        "    return 1\n",
        "  return fat(n-1)*n\n",
        "print(fat(5))"
      ],
      "metadata": {
        "id": "xldQbR723AsS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 061: Refaça o DESAFIO 051, lendo o primeiro termo e a razão de uma\n",
        "#PA, mostrando os 10 primeiros termos da progressão usando a estrutura while.\n",
        "n = int(input(\"n\"))\n",
        "r = int(input(\"r\"))\n",
        "acu = 10\n",
        "pa = 0\n",
        "while 0 < acu :\n",
        "  pa += n + r \n",
        "  acu -= 1\n",
        "print(\"Pa\", pa)"
      ],
      "metadata": {
        "id": "VcMR8TTD3ycA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 062: Melhore o DESAFIO 061, perguntando para o usuário se ele quer\n",
        "#mostrar mais alguns termos. O programa encerrará quando ele disser que quer mostrar 0\n",
        "#termos.\n",
        "a1 = int(input(\"a1\"))\n",
        "r = int(input(\"r\"))\n",
        "acu, pa = 10 , 0\n",
        "while acu >= 1:\n",
        "  pa += n + r\n",
        "  acu -= 1\n",
        "  if acu == 1:\n",
        "    m = int(input(\"Mostrar mais quantos termos ?\"))\n",
        "    if m == 0:\n",
        "      break\n",
        "    acu += m\n",
        "  \n",
        "print(\"Pa \", pa)"
      ],
      "metadata": {
        "id": "L0GlQKqq4pw3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 063: Escreva um programa que leia um número N inteiro qualquer e\n",
        "#mostre na tela os N primeiros elementos de uma Sequência de Fibonacci.\n",
        "#Ex: 0 - 1 - 1 - 2 - 3 - 5 – 8\n",
        "n = int(input(\"n \"))\n",
        "acu ,f2 , f1, fib = 0,0,1,0\n",
        "while acu <= (n-1):\n",
        "  fib = f1 + f2\n",
        "  x = f2\n",
        "  f2 = f1\n",
        "  f1 = f2 + x\n",
        "  acu += 1\n",
        "\n",
        "print(fib)"
      ],
      "metadata": {
        "id": "49hQmQaf5ZM2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 064: Crie um programa que leia vários números inteiros pelo teclado. O\n",
        "#programa só vai parar quando o usuário digitar o valor 999, que é a condição de parada.\n",
        "#No final, mostre quantos números foram digitados e qual foi a soma entre eles\n",
        "#(desconsiderando o flag).\n",
        "acu,n, soma = 0,0,0\n",
        "lista = []\n",
        "bol = True\n",
        "while bol == True:\n",
        "  n = int(input(\"n \"))\n",
        "  if n == 999:\n",
        "    bol = False\n",
        "    break\n",
        "  lista.append(n)\n",
        "  acu += 1\n",
        "\n",
        "for i in lista:\n",
        "  soma += i\n",
        "\n",
        "print(acu, soma)\n",
        "  \n"
      ],
      "metadata": {
        "id": "Saa5Ke2E8QcH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 065: Crie um programa que leia vários números inteiros pelo teclado.\n",
        "#No final da execução, mostre a média entre todos os valores e qual foi o maior e o menor\n",
        "#valores lidos. O programa deve perguntar ao usuário se ele quer ou não continuar a digitar\n",
        "#valores.\n",
        "b = True\n",
        "n, acu, soma, lista, c= 0, 0,0 ,[], str\n",
        "while b == True:\n",
        "  n = int(input(\"n = \"))\n",
        "  c = input(\"[S/N]\")\n",
        "  if c == \"N\":\n",
        "    b = False\n",
        "  acu += 1\n",
        "  soma += n\n",
        "print(\"Media {}\".format(soma/acu))\n",
        "print(\"Quantidade de numeros digitados {} \".format(acu))\n",
        "lista.append(n)\n",
        "menor = 9999999\n",
        "maior = 0\n",
        "acu = 0\n",
        "while len(lista) > acu:\n",
        "  if lista[acu]> maior :\n",
        "    maior = lista[acu]\n",
        "  elif lista[acu] < menor :\n",
        "    menor = lista [acu]\n",
        "  acu += 1\n",
        "print(\"Maior \", maior)\n",
        "print(\"menor \", menor)\n"
      ],
      "metadata": {
        "id": "azNq4qtP-7kG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 067: Faça um programa que mostre a tabuada de vários números, um\n",
        "#de cada vez, para cada valor digitado pelo usuário. O programa será interrompido quando\n",
        "#o número solicitado for negativo\n",
        "b , n = True, 0\n",
        "while b == True:\n",
        "  n = int(input(\"Digite um n \"))\n",
        "  if n <= 0:\n",
        "    break\n",
        "  for i in range(11):\n",
        "\n",
        "    print(\"{} x {} = {} \".format(n, i, n*i))"
      ],
      "metadata": {
        "id": "Fr-21rKYA4al"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 068: Faça um programa que jogue par ou ímpar com o computador. O\n",
        "#jogo só será interrompido quando o jogador perder, mostrando o total de vitórias\n",
        "#consecutivas que ele conquistou no final do jogo.\n",
        "\n",
        "b, valor = True, str\n",
        "soma = int\n",
        "escolha = str\n",
        "vez = str\n",
        "acu = 0\n",
        "while b == True:\n",
        "  mão_maquina = random.randint(0,10)\n",
        "  escolha = str(input(\"Escolha [PAR/IMPAR]\"))\n",
        "  mão = int(input(\"Digite uma jogada: \"))\n",
        "  soma = mão_maquina + mão\n",
        "  \n",
        "  if soma % 2 == 0:\n",
        "    vez = \"PAR\"\n",
        "  else:\n",
        "    vez = \"IMPAR\"\n",
        "  if vez != escolha:\n",
        "    b == False\n",
        "    break\n",
        "  acu += 1 \n",
        "print(\"Numero de vitorias {} \".format(acu))"
      ],
      "metadata": {
        "id": "CSmKeY-jBvtV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 069: Crie um programa que leia a idade e o sexo de várias pessoas. A\n",
        "#cada pessoa cadastrada, o programa deverá perguntar se o usuário quer ou não continuar.\n",
        "#No final, mostre:\n",
        "#A) quantas pessoas tem mais de 18 anos.\n",
        "#B) quantos homens foram cadastrados.\n",
        "#C) quantas mulheres tem menos de 20 anos.\n",
        "\n",
        "s, e, m, f, i, acu, sexo, idade = str, \"Sim\", [],[],[],0,[]\n",
        "while e == \"Sim\":\n",
        "  s = str(input(\"[M/F]\"))\n",
        "  sexo.append(s)\n",
        "  i - int(input(\"Digite a idade: \"))\n",
        "  idade.append(i)\n",
        "  \n",
        "for j in idade:\n",
        "  if j >=18:\n",
        "    acu += 1\n",
        "for j in sexo:\n",
        "  if j == \"M\":\n",
        "    acu1 += 1\n",
        "for z in range(len(sexo)):\n",
        "  if sexo[z] == \"M\":\n",
        "    acux += 1\n",
        "  if idade[z]< 20:\n",
        "    acuy += 1\n",
        "\n",
        "    \n"
      ],
      "metadata": {
        "id": "PDmoD7td8TLn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercício Python 070: Crie um programa que leia o nome e o preço de vários produtos. O\n",
        "#programa deverá perguntar se o usuário vai continuar ou não. No final, mostre:\n",
        "#A) qual é o total gasto na compra.\n",
        "#B) quantos produtos custam mais de R$1000.\n",
        "#C) qual é o nome do produto mais barato.\n",
        "\n",
        "saida, dicionario, = False, {}\n",
        "\n",
        "while saida == False:\n",
        "  nome = str(input(\"Nome: \"))\n",
        "  preço = float(input(\"Preço: \"))\n",
        "  dicionario[nome] = preço\n",
        "  sair = input(\"Deseja sair ? [S/N]\")\n",
        "  if sair == \"S\":\n",
        "    saida = True\n",
        "  acu += 1\n",
        "\n",
        "print(dicionario)\n",
        "soma = sum(dicionario.values())\n",
        "for i in dicionario.values():\n",
        "  if i > 1000:\n",
        "    b += 1\n",
        "print(\"{} são mais caros que R$ 1000,00 : \".format(b))"
      ],
      "metadata": {
        "id": "MZsSni0RUjbT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qK-CxYGhd5yh"
      },
      "outputs": [],
      "source": [
        "#Exercicio 71\n",
        "#Contador de minimo de notas para caixa eletronico (50,20,10,1)\n",
        "v = int(input(\"V  \"))\n",
        "resto = int\n",
        "n50, n20, n10, n1 = 0,0,0,0\n",
        "\n",
        "if v >= 50:\n",
        "    n50 = int(v / 50)\n",
        "    resto = v % 50\n",
        "    v = v - n50*50\n",
        "    if 50 > int(resto) >=20:\n",
        "        n20 = int(v/20)\n",
        "        resto = v % 20\n",
        "        v = v - n20*20\n",
        "        if 20 > int(resto) :\n",
        "            n10 = int(v / 10)\n",
        "            resto = v % 10\n",
        "            v = v - n10*10\n",
        "            if 10 > int(resto) >=1:\n",
        "                n1 = v\n",
        "if 50 > v >= 20:\n",
        "\n",
        "    n20 = int(v/20)\n",
        "    resto = v % 20\n",
        "    v = v - n20*20\n",
        "    if 20 > int(resto) :\n",
        "        n10 = int(v / 10)\n",
        "        resto = v % 10\n",
        "        v = v - n10*10\n",
        "        if 10 > int(resto) >=1:\n",
        "            n1 = v\n",
        "if 20 > v :\n",
        "\n",
        "    n10 = int(v / 10)\n",
        "    resto = v % 10\n",
        "    v = v - n10*10\n",
        "    if 10 > int(resto) >=1:\n",
        "        n1 = v\n",
        "print(\" Notas de R$50,00 {} \\n Notas de R$20,00 {} \\n Notas de R$10,00 {} \\n Notas de R$1,00 {}\".format(n50,n20,n10,n1))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercicio 72\n",
        "#Numeros por extenso de 0-20\n",
        "lista_ext = [\"zero\" ,\"um\", \"dois\", \"três\", \"quatro\", \"cinco\", \"seis\" , \"sete\", \"oito\", \"nove\", \"dez\", \"onze\", \"doze\", \"treze\", \"quartoze\", \"quinze\", \"dezesseis\", \"dezessete\", \"dezoito\", \"dezenove\", \"vinte\"]\n",
        "i = int(input(\"Digite um valor de 0 - 20: \"))\n",
        "print(\"O valor digitado {} por extensso é {}.\".format(i, lista_ext[i]))"
      ],
      "metadata": {
        "id": "ESFj1n-beuVg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Exercicio 74\n",
        "#Crie um programa que vai gerar cinco números aleatórios e\n",
        "#colocar em uma tupla. Depois disso, mostre a listagem de números gerados e também\n",
        "#indique o menor e o maior valor que estão na tupla.\n",
        "import random\n",
        "lista = []\n",
        "for i in range(5):\n",
        "  lista.append(random.randint(0,100))\n",
        "listat = tuple(lista)\n",
        "print(lista)\n",
        "maior = 0\n",
        "menor = 9999999\n",
        "for i in range(5):\n",
        "  if lista[i] > maior:\n",
        "    maior = lista[i]\n",
        "  if lista[i]< menor:\n",
        "    menor = lista[i]\n",
        "print(\"maior {} menor {} \".format(maior, menor))"
      ],
      "metadata": {
        "id": "RvhrBsgegN3E"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
